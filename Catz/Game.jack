/** Game */

class Game {

    // Controllable character
    field Cat actor;

    // Spawn places (no time for random)
    field Array foodSpawns;

    // References to food objects
    field Array foods;
    field int nfoods;

    // Current score
    field int score;
    field int lastScore;
    // Lives. 0 -> game over
    field int lives;
    field int lastLives;

    // EXPERIMENTAL
    //field List objects;

    // Game loop relative speed
    field int tick;

    // Idle ticks counter (loop calls) to track idle animation
    field int idle;

    // Is game running?
    field boolean running;

    // Border
    static int width;
    static int height;

    constructor Game new() {

        let width = 512;
        let height = 256;

        // bottom, minus sprite height
        let actor = Cat.new(256-16, 0);
        //let objects = List.new(actor, null);

        let tick = 10; // 10 ticks ~= 0.1s on my machine
        let idle = 0;
        let running = true;

	let score = 0;
	let lastScore = -1;  // draw score first time
        let lives = 3;
        let lastLives = 4; // draw lives first time
        let nfoods = 6;
        let foodSpawns = Array.new(nfoods);
        let foods = Array.new(nfoods);
        do fillFoodSpawns();

        return this;
    }

    method void fillFoodSpawns() {
        var int i;
        var Array tmp;
        let i = 0;
        while (~(i = nfoods)) {
            let foodSpawns[i] = Vec.new(32, 64 + (64 * i));
            let tmp = foodSpawns[i];
            let foods[i] = Food.new(i, tmp[0], tmp[1]);
            //do objects.append(foods[i]);
            let i = i + 1;
        }
        return;
    }

    method void dispose() {
        do actor.dispose();
        do foodSpawns.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /* Exit. */
    method void exit() {
        let running = false;
        return;
    }

    method void checkCollisions() {
        var int i;
        var Food food;

        do actor.update();

        // Check food collisions
        let i = 0;
        while (~(i = nfoods)) {
            let food = foods[i];
            if (Utils.collide(actor.getx(), actor.gety(),
                              food.getx(), food.gety())
                ) {
                if (food.good()) {
                    let score = score + food.getScore();
                } else {
                    let lives = lives - 1;
                }
            }
            let i = i + 1;
        }
        return;
    }

    /* Handle events. */
    method void events() {
        var char key;
        // amount of ticks after set idle animation for actor
        var int maxIdle;
        // after what amount of idle cycles to stop moving
        var int stopMotionIdle;

        let key = Keyboard.keyPressed();
        let maxIdle = tick * 40;  // ~4s
        let stopMotionIdle = tick * 5;  // ~0.5s

        // increase idle ticks counter
        if (~key) {
            let idle = idle + 1;
            // Activate idle animation
            if (idle > maxIdle) {
                let idle = maxIdle;  // prevent int overflow
                do actor.stop();
            } else {
                // Not max idle but enough to stop motion
                if (idle > stopMotionIdle) {
                    do actor.stopMotion();
                }
            }
        }

        // if (key = 32) { // space
        if (key = 81) {do exit();}  // q
        if (key = 130) {do actor.moveLeft(); let idle = 0;}  // left arrow
        if (key = 132) {do actor.moveRight(); let idle = 0;}  // right arrow
        return;
    }

    /* Update objects' state. */
    method void update() {
        var int i;
        var Food food;

        // Update actor's state
        do actor.update();

        // Update state of foods and check collisions
        let i = 0;
        while (~(i = nfoods)) {
            let food = foods[i];
            do food.update();
            if (Utils.collide(actor.getx(), actor.gety(),
                              food.getx(), food.gety())
                ) {
                if (food.good()) {
                    let score = score + food.getScore();
                } else {
                    let lives = lives - 1;
                }
                do food.respawn();
            }
            let i = i + 1;
        }
        return;
    }

    /* Render objects to screen. */
    method void render() {
        var int i;
        var Food data;

        // Optimization, do not call Output if no need to update values
	if (lastScore < score) {
	    do Output.moveCursor(0, 0);
	    do Output.printString("Score: ");
	    do Output.printInt(score);
	    let lastScore = score;
	}

        // Here too
        if (~(lives = lastLives)) {
            do Output.moveCursor(0, 20);
            do Output.printString("Lives: ");
            do Output.printInt(lives);
            let lastLives = lives;
        }

        // Render actor
        do actor.render();

        // Render food
        let i = 0;
        while (~(i = nfoods)) {
            let data = foods[i];
            do data.render();
            let i = i + 1;
        }

        if (lives = 0) {
            do Output.moveCursor(20, 20);
            do Output.printString("Game Over. Final score: ");
            do Output.printInt(score);
            let running = false;
        }
        return;
    }

    /* Main loop of the application. */
    method void loop() {

        while (running) {
            do events();
            do update();
            do render();

            do Sys.wait(tick);
        }
        return;
    }
}
