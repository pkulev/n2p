/** Game */

class Game {

    // Controllable character
    field Cat actor;

    // Idle ticks counter (loop calls) to track idle animation
    field int idle;

    // Is game running?
    field boolean running;

    // Border
    static int width;
    static int height;

    constructor Game new() {

        let width = 512;
        let height = 256;

        // bottom, minus sprite height
        let actor = Cat.new(256-16, 0);
        let idle = 0;
        let running = true;

        return this;
    }

    method void dispose() {
        do actor.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void exit() {
        let running = false;
        return;
    }

    method void events() {
        var char key;
        var int maxIdle;
        // after what amount of idle cycles to stop moving
        var int stopMotionIdle;

        let key = Keyboard.keyPressed();
        let maxIdle = actor.getMaxIdle();
        let stopMotionIdle = 2000;  // ~1s

        // increase idle ticks counter
        if (~key) {
            let idle = idle + 1;
            // Activate idle animation
            if (idle > maxIdle) {
                let idle = maxIdle;  // prevent int overflow
                do actor.stop();
            } else {
                // Not max idle but enough to stop motion
                //if (idle > stopMotionIdle) {
                //    do actor.stopMotion();
                //}
            }
        }

        // if (key = 32) { // space
        if (key = 81) {let running = false;}  // q
        if (key = 130) {do actor.moveLeft(); let idle = 0;}  // left arrow
        if (key = 132) {do actor.moveRight(); let idle = 0;}  // right arrow
        return;
    }

    method void update() {
        do actor.update();
        return;
    }

    method void render() {
        do actor.render();
        return;
    }

    /* Main loop of the application. */
    method void loop() {

        while (running) {
            do events();
            do update();
            do render();

            do Sys.wait(15);
        }
        return;
    }
}
