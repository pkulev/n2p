#!/usr/bin/env python3

"""JACK Compiler.

Compiles JACK language to JACK VM language.
"""

import argparse
from collections import namedtuple
import contextlib
import functools
import glob
import itertools
import logging
import os
import re
from xml.sax import saxutils


# --> TOKENIZER

class SyntaxError(Exception):
    """Base class for Jack->VM compilation exceptions."""

    def __init__(self, msg):
        super(SyntaxError, self).__init__(msg)


class UnknownTokenError(SyntaxError):
    """Got unknown token."""

    #def __init__(self, lineno, instruction, args):
    def __init__(self, token):
        super(UnknownTokenError, self).__init__(
            "Unknown token: {0}".format(token))

class TokenNotExpected(SyntaxError):
    """Wrong place for this token."""

    def __init__(self, allowed):
        super(TokenNotExpected, self).__init__(
            "Only next tokens allowed here: {0}".format(allowed))


COMMENT_SYMBOL = "//"

COMMENT           = "commentary"
MULTILINE_COMMENT = "multiline commentary"

BOOLEAN     = "boolean"
CHAR        = "char"
CLASS       = "class"
CONSTRUCTOR = "constructor"
DO          = "do"
ELSE        = "else"
FALSE       = "false"
FIELD       = "field"
FUNCTION    = "function"
IF          = "if"
INT         = "int"
LET         = "let"
METHOD      = "method"
NULL        = "null"
RETURN      = "return"
STATIC      = "static"
THIS        = "this"
TRUE        = "true"
VAR         = "var"
VOID        = "void"
WHILE       = "while"

KEYWORD    = "keyword"
SYMBOL     = "symbol"
INTEGER    = "integer"
STRING     = "string"
IDENTIFIER = "id"
TOKEN      = "token"
ARGUMENT   = "argument"


KEYWORDS = set((
    CLASS, CONSTRUCTOR, FUNCTION, METHOD, FIELD, STATIC, VAR,
    INT, CHAR, BOOLEAN, VOID, TRUE, FALSE, NULL,
    THIS, LET, DO, IF, ELSE, WHILE, RETURN
))

OPS = ("+" , "-" , "*" , "/" , "&", "|", "<" , ">" , "=")

UNARY_OPS = ("-", "~")

SYMBOLS = set(((
    "{", "}", "(", ")", "[", "]",
    ".", ";", ",",
    ) + OPS + UNARY_OPS
))

_RE_KEYWORD    = r"|".join(KEYWORDS)
_RE_SYMBOL     = "|".join(map(re.escape, SYMBOLS))
_RE_INTEGER    = r"\d+"
_RE_STRING     = r"\"[^\"\n]*\""
_RE_IDENTIFIER = r"[a-zA-Z_][a-zA-Z0-9_]*"
_RE_TOKEN      = r"|".join(
    [_RE_KEYWORD, _RE_SYMBOL, _RE_INTEGER, _RE_STRING, _RE_IDENTIFIER]
)

RE_COMMENT           = re.compile(r"{0}[^\n]*\n".format(COMMENT_SYMBOL))
RE_MULTILINE_COMMENT = re.compile(r"/\*(.*?)\*/", re.MULTILINE | re.DOTALL)
RE_KEYWORD           = re.compile(_RE_KEYWORD)
RE_SYMBOL            = re.compile(_RE_SYMBOL)
RE_INTEGER           = re.compile(_RE_INTEGER)
RE_STRING            = re.compile(_RE_STRING)
RE_IDENTIFIER        = re.compile(_RE_IDENTIFIER)
RE_TOKEN             = re.compile(_RE_TOKEN)


TOKENS = {
    COMMENT:           RE_COMMENT,
    MULTILINE_COMMENT: RE_MULTILINE_COMMENT,
    KEYWORD:           RE_KEYWORD,
    SYMBOL:            RE_SYMBOL,
    INTEGER:           RE_INTEGER,
    STRING:            RE_STRING,
    IDENTIFIER:        RE_IDENTIFIER,
    TOKEN:             RE_TOKEN,  # for check that lexem belongs to JACK lang
}


class Token(object):
    def __init__(self, type_, value):
        self._type = type_
        self.value = value

    def check(self, allowed):
        return self.value in allowed

    def to_xml(self):
        return "<{type}> {value} </{type}>".format(
            type=self._type, value=saxutils.escape(self.value))

    __str__ = to_xml


class Keyword(Token):
    def __init__(self, value):
        if not value in KEYWORDS:
            raise ValueError()
        super(Keyword, self).__init__("keyword", value)


class Symbol(Token):
    def __init__(self, value):
        if not value in SYMBOLS:
            raise Exception()
        super(Symbol, self).__init__("symbol", value)


class Integer(Token):
    def __init__(self, value):
        if not (0 <= int(value) <= (2 ** 15 - 1)):
            raise Exception()
        super(Integer, self).__init__("integerConstant", value)


class String(Token):
    def __init__(self, value):
        if not (value[0] == '"' and value[-1] == '"'):
            raise Exception()
        super(String, self).__init__("stringConstant", value[1:-1])


class Identifier(Token):
    def __init__(self, value):
        super(Identifier, self).__init__("identifier", value)


def is_type(token, source):
    """Check token class.

    :param str token: token class
    :param str source: line of code

    :return: re or None
    """
    return TOKENS[token].match(source)


def strip_comments(sources):
    """Strip comments.

    :param str sources: raw jack code

    :return str: stripped sources without comments
    """

    logging.info("Stripping comments -->")
    sources = RE_COMMENT.sub("", sources)
    sources = RE_MULTILINE_COMMENT.sub("", sources)
    logging.info("Stripping comments <--")
    return sources


def tokenize_line(source):
    errors = 0

    for leftover in TOKENS[TOKEN].split(source):
        if leftover.strip():
            errors += 1
            logging.error("Lexem doesn't belong to JACK: %s", leftover)
    if errors != 0:
        logging.fatal("Total errors: %s", errors)
        raise UnknownTokenError(leftover)

    for token in TOKENS[TOKEN].findall(source):
        if is_type(KEYWORD, token):
            yield Keyword(token)
        elif is_type(SYMBOL, token):
            yield Symbol(token)
        elif is_type(INTEGER, token):
            yield Integer(token)
        elif is_type(STRING, token):
            yield String(token)
        elif is_type(IDENTIFIER, token):
            yield Identifier(token)
        else:
            raise UnknownTokenError(leftover)


def tokenize(sources):
    tokens = []
    for line in strip_comments(sources).splitlines():
        tokens.extend(tokenize_line(line))
    return tokens

def tokens_to_xml(tokens):
    return (
        "<tokens>\n" +
        os.linesep.join(map(Token.to_xml, tokens)) +
        "\n</tokens>\n"
    )

# <-- TOKENIZER

# --> PARSER


SymbolItem = namedtuple("SymbolItem", ["name", "type", "kind", "idx"])


class ScopedSymbolTable(object):

    def __init__(self, scope, allowed_kinds):
        self._scope = scope
        self._allowed_kinds = allowed_kinds

        self._table = {}
        self._counters = {kind: 0 for kind in allowed_kinds}

    def define(self, name, typ, kind):

        if kind not in self._allowed_kinds:
            raise Exception(
                "No kind '{0}' allowed. Allowed: {1}.".format(
                    kind, self._allowed_kinds))

        if name in self._table:
            raise Exception(
                "Such identifier already exists in symtable: '{0}'.".format(
                    name))

        self._table[name] = SymbolItem(name, typ, kind, self._counters[kind])
        self._counters[kind] += 1

    @property
    def scope(self):
        return self._scope

    def __getitem__(self, name):
        return self._table.get(name)



class SubroutineSymbolTable(ScopedSymbolTable):

    def __init__(self, name):
        super(SubroutineSymbolTable, self).__init__(name, [VAR, ARGUMENT])


class ClassSymbolTable(ScopedSymbolTable):

    def __init__(self, name):
        super(ClassSymbolTable, self).__init__(name, [FIELD, STATIC])


class SymbolTable(object):

    def __init__(self):
        self._classes = {}
        self._cur_class = None
        self._cur_sub = None
        self._sub_type = None

    def mangle_name(self, subname, classname=None):
        if classname is None:
            classname = self._cur_class.scope
        return "{0}.{1}".format(classname, subname)

    def class_scope(self, name):
        if name in self._classes:
            raise Error("Class redefinition: '{0}'".format(name))

        class_scope = ClassSymbolTable(name)
        self._classes[name] = class_scope
        self._cur_class = class_scope
        self._cur_sub = None
        self._sub_type = None
        return name

    def subroutine_scope(self, name, typ):
        sub_scope = SubroutineSymbolTable(name)
        self._cur_sub = sub_scope
        self._sub_type = typ
        return self.mangle_name(name)

    def __getitem__(self, name):
        if not self._cur_class:
            raise Exception("Out of class scope.")

        symbol = None

        if self._cur_sub:
            symbol = self._cur_sub[name]

        if symbol is None:
            symbol = self._cur_class[name]

        if (
                symbol is not None and self._sub_type == METHOD and
                symbol.kind == ARGUMENT
        ):
            symbol = symbol._replace(index=symbol.idx + 1)

        if symbol is not None and self._sub_type == FUNCTION:
            if symbol.kind == FIELD:
                raise Exception("Can't use field variables in function.")

        return symbol

    def define(self, name, typ, kind):
        if self._cur_sub:
            self._cur_sub.define(name, typ, kind)
        elif self._cur_class:
            self._cur_class.define(name, typ, kind)
        else:
            raise Exception("No current scope for '%s'.".format(name))


WHILE_EXP = "WHILE::EXP{0}"
WHILE_END = "WHILE::END{0}"
IF_TRUE   = "IF::TRUE{0}"
IF_ELSE   = "IF::FALSE{0}"
IF_END    = "IF::END{0}"


class Bytecode(object):

    def __init__(self):
        self._bytecode = []
        self._while_idx = 0
        self._if_idx = 0

    def _vm(self, *lines):
        self._bytecode.extend(lines)

    def dump(self):
        return os.linesep.join(self._bytecode)

    def write_function_declaration(self, name, nlocals):
        self._if_idx = 0
        self._while_idx = 0
        self._vm("function {0} {1}".format(name, nlocals))

    def write_constructor(self, nfields):
        """Allocate memory for object fields."""

        self.write_push("constant", nfields)
        self.write_method_call("Memory.alloc", 1)
        self.write_pop("pointer", 0)

    def write_method_declaration(self):
        self.write_push("argument", 0)
        self.write_pop("pointer", 0)

    def write_method_call(self, name, nargs):
        self._vm("call {0} {1}".format(name, nargs))


    def write_push(self, segment, idx):
        self._vm("push {0} {1}".format(segment, idx))

    def write_pop(self, segment, idx):
        self._vm("pop {0} {1}".format(segment, idx))

    def write_return(self):
        self._vm("return")

    def write_binary_operation(self, symbol):
        commands = {
            "+": "add",
            "*": "call Math.multiply 2",
            "-": "sub",
            "/": "call Math.divide 2",
            "&": "and",
            "<": "lt",
            ">": "gt",
            "=": "eq",
            "|": "or",
        }
        self._vm(commands[symbol])

    def write_unary_operation(self, symbol):
        commands = {
            "-": "neg",
            "~": "not"
        }
        self._vm(commands[symbol])

    def write_push_symbol(self, symbol):
        self.write_push(self.symbol_segment(symbol.kind), symbol.idx)

    def write_pop_symbol(self, symbol):
        self.write_pop(self.symbol_segment(symbol.kind), symbol.idx)

    def symbol_segment(self, kind):
        kinds = {
            VAR: "local",
            ARGUMENT: "argument",
            FIELD: "this",
            STATIC: "static",
        }
        return kinds[kind]

    def write_constant(self, value):
        if value == TRUE:
            self.write_push("constant", 0)
            self._vm("not")
        elif value == FALSE:
            self.write_push("constant", 0)
        elif value == THIS:
            self.write_push("pointer", 0)
        elif value == NULL:
            self.write_push("constant", 0)
        else:
            raise ValueError(value)

    def write_label(self, label):
        self._vm("label {0}".format(label))

    def write_if_goto(self, label):
        self._vm("if-goto {0}".format(label))

    def write_goto(self, label):
        self._vm("goto {0}".format(label))

    def write_while_declaration_start(self):
        self.write_label(WHILE_EXP.format(self._while_idx))
        self._while_idx += 1
        return self._while_idx - 1

    def write_while_declaration_end(self, idx):
        self._vm("not")
        self.write_if_goto(WHILE_END.format(idx))

    def write_while_end(self, idx):
        self.write_goto(WHILE_EXP.format(idx))
        self.write_label(WHILE_END.format(idx))

    def write_if_start(self):
        self.write_if_goto(IF_TRUE.format(self._if_idx))
        self.write_goto(IF_ELSE.format(self._if_idx))
        self.write_label(IF_TRUE.format(self._if_idx))
        self._if_idx += 1
        return self._if_idx - 1

    def write_else(self, idx):
        self.write_goto(IF_END.format(idx))
        self.write_label(IF_ELSE.format(idx))

    def write_if_end(self, idx, is_else):
        if is_else:
            self.write_label(IF_END.format(idx))
        else:
            self.write_label(IF_ELSE.format(idx))

    def write_string(self, string):
        """Allocate string and create it via OS."""

        self.write_push("constant", len(string))
        self.write_method_call("String.new", 1)
        for char in string:
            self.write_push("constant", ord(char))
            self.write_method_call("String.appendChar", 2)

    def write_array_assignment(self):
        self.write_pop("temp", 0)
        self.write_pop("pointer", 1)
        self.write_push("temp", 0)
        self.write_pop("that", 0)

    def write_array_subscription(self, symbol):
        self.write_push_symbol(symbol)
        self.write_binary_operation("+")
        self.write_pop("pointer", 1)
        self.write_push("that", 0)


def compile_bytecode(tokens, mode):
    return CompilerEngine(tokens).process(mode)


def check_token(token, type_, *allowed):
    if allowed:
        return isinstance(token, type_) and token.check(allowed)
    return isinstance(token, type_)


def ensure(type_):

    def outer(func):

        @functools.wraps(func)
        def inner(self, *allowed):

            return func(*allowed)

        return inner
    return outer


class CompilerEngine(object):

    def __init__(self, tokens):
        self._tokens = tokens

        self._symtable = SymbolTable()
        self._xml_out = ""
        self._bytecode = Bytecode()
        self._indent = 0
        self._pos = 0

    def process(self, mode):
        self._process_class_declaration()
        if self._pos != len(self._tokens):
            raise SyntaxError("There are leftovers")
        if mode == "xml":
            return self._xml_out
        elif mode == "vm":
            return self._bytecode.dump()

    def _xml(self, node):
        indent = "  " * self._indent
        self._xml_out += "{0}{1}\n".format(indent, node)

    def _write_token(self, token):
        self._xml(token.to_xml())
        self._pos += 1

    @contextlib.contextmanager
    def _rule(self, rule):
        try:
            self._xml("<{0}>".format(rule))
            self._indent += 1
            yield
        finally:
            self._indent -= 1
            self._xml("</{0}>".format(rule))

    def _next_token(self):
        return self._tokens[self._pos]

    def _check_next(self, type_, *allowed):
        return check_token(self._next_token(), type_, *allowed)

    def _next_keyword(self, *allowed):
        if not self._check_next(Keyword, *allowed):
            raise TokenNotExpected(repr(allowed))
        token = self._next_token()
        self._write_token(token)
        return token.value

    def _next_symbol(self, *allowed):
        if not self._check_next(Symbol, *allowed):
            raise TokenNotExpected(repr(allowed))
        token = self._next_token()
        self._write_token(token)
        return token.value

    def _next_identifier(self, *allowed):
        if not self._check_next(Identifier, *allowed):
            raise TokenNotExpected(repr(allowed))
        token = self._next_token()
        self._write_token(token)
        return token.value

    def _next_symbol_declaration(self, typ, kind):
        identifier = self._next_identifier()
        self._symtable.define(identifier, typ, kind)

    def _next_type(self, *allowed):
        token = self._next_token()
        if isinstance(token, Identifier):
            self._next_identifier()
        else:
            self._next_keyword(CHAR, BOOLEAN, INT)

    def _process_class_declaration(self):
        with self._rule("class"):
            self._next_keyword(CLASS)
            classname = self._next_identifier()
            self._symtable.class_scope(classname)
            self._next_symbol("{")
            nfields = self._next_class_variable_declarations()
            self._next_subroutine_declarations(nfields)
            self._next_symbol("}")

    def _next_class_variable_declarations(self):
        count = 0
        while self._check_next(Keyword, FIELD, STATIC):
            if self._check_next(Keyword, FIELD):
                count += self._next_class_variable_declaration()
            else:
                self._next_class_variable_declaration()
        return count

    def _next_class_variable_declaration(self):
        with self._rule("classVarDec"):
            kind = self._next_keyword(STATIC, FIELD)
            return self._next_variable_declaration()

    def _next_variable_declaration(self, kind):
        typ = self._next_type()
        identifier = self._next_identifier()

        self._symtable.define(identifier, typ, kind)
        var_count = 1

        while not self._check_next(Symbol, ";"):
            var_count += 1
            self._next_symbol(",")
            identifier = self._next_identifier()
            self._symtable.define(identifier, typ, kind)

        self._next_symbol(";")
        return var_count

    def _next_subroutine_declarations(self, nfields=None):
        while self._check_next(Keyword, CONSTRUCTOR, FUNCTION, METHOD):
            self._next_subroutine_declaration(nfields)

    def _next_subroutine_declaration(self, nfields):
        with self._rule("subroutineDec"):
            sub_type = self._next_keyword(CONSTRUCTOR, FUNCTION, METHOD)

            if self._check_next(Keyword, VOID):
                self._next_keyword(VOID)
            else:
                self._next_type()

            identifier = self._next_identifier()
            fname = self._symtable.subroutine_scope(identifier, sub_type)
            self._next_symbol("(")
            self._next_plist()
            self._next_symbol(")")
            self._next_subroutine_body(fname, sub_type, nfields)

    def _next_plist(self):
        with self._rule("parameterList"):
            first = True
            while not self._check_next(Symbol, ")"):
                if first:
                    first = False
                else:
                    self._next_symbol(",")

                typ = self._next_type()
                identifier = self._next_identifier()
                self._symtable.define(identifier, typ, ARGUMENT)

    def _next_subroutine_body(self, fname, sub_type, nfields=None):
        with self._rule("subroutineBody"):
            self._next_symbol("{")
            nvars = 0
            while self._check_next(Keyword, VAR):
                nvars += self._next_subroutine_var_declaration()
            self._bytecode.write_function_declaration(fname, nvars)
            if sub_type == CONSTRUCTOR:
                self._bytecode.write_constructor(nfields)
            elif sub_type == METHOD:
                self._bytecode.write_method_declaration()

            self._next_statements()
            self._next_symbol("}")

    def _next_subroutine_var_declaration(self):
        with self._rule("varDec"):
            self._next_keyword(VAR)
            return self._next_variable_declaration(VAR)

    def _next_statements(self):
        with self._rule("statements"):
            done = False
            while not done:
                if self._check_next(Keyword, LET):
                    self._next_let_statement()
                elif self._check_next(Keyword, IF):
                    self._next_if_statement()
                elif self._check_next(Keyword, WHILE):
                    self._next_while_statement()
                elif self._check_next(Keyword, DO):
                    self._next_do_statement()
                elif self._check_next(Keyword, RETURN):
                    self._next_return_statement()
                else:
                    done = True

    def _next_let_statement(self):
        with self._rule("letStatement"):
            self._next_keyword(LET)
            identifier = self._next_identifier()
            symbol = self._symtable[identifier]

            # Array subscription
            is_array = False
            if self._check_next(Symbol, "["):
                is_array = True
                self._next_symbol("[")
                self._next_expression()
                self._next_symbol("]")
                self._bytecode.write_push_symbol(symbol)
                self._bytecode.write_binary_operation("+")

            self._next_symbol("=")
            self._next_expression()
            self._next_symbol(";")

            if is_array:
                self._bytecode.write_array_assignment()
            else:
                self._bytecode.write_pop_symbol(symbol)

    def _next_if_statement(self):
        with self._rule("ifStatement"):
            self._next_keyword(IF)
            self._next_symbol("(")
            self._next_expression()
            self._next_symbol(")")
            if_idx = self._bytecode.write_if_start()
            self._next_symbol("{")
            self._next_statements()
            self._next_symbol("}")

            # Else branch
            if self._check_next(Keyword, ELSE):
                self._bytecode.write_else(if_idx)
                self._next_keyword(ELSE)
                self._next_symbol("{")
                self._next_statements()
                self._next_symbol("}")
                self._bytecode.write_if_end(if_idx, True)
            else:
                self._bytecode.write_if_end(if_idx, False)

    def _next_while_statement(self):
        with self._rule("whileStatement"):
            self._next_keyword(WHILE)
            while_idx = self._bytecode.write_while_declaration_start()
            self._next_symbol("(")
            self._next_expression()
            self._next_symbol(")")
            self._bytecode.write_while_declaration_end(while_idx)
            self._next_symbol("{")
            self._next_statements()
            self._next_symbol("}")
            self._bytecode.write_while_end(while_idx)

    def _next_do_statement(self):
        with self._rule("doStatement"):
            self._next_keyword(DO)
            self._next_subroutine_call()
            self._next_symbol(";")
            self._bytecode.write_pop("temp", 0)

    def _next_subroutine_call(self):
        first_id = self._next_identifier()
        is_method = False

        if self._check_next(Symbol, "."):
            self._next_symbol(".")
            second_id = self._next_identifier()
            symbol = self._symtable[first_id]
            if symbol:
                fname = self._symtable.mangle_name(second_id, symbol.type)
                self._bytecode.write_push_symbol(symbol)
                is_method = True
            else:
                fname = self._symtable.mangle_name(second_id, first_id)
        else:
            fname = self._symtable.mangle_name(first_id)
            self._bytecode.write_push("pointer", 0)
            is_method = True

        self._next_symbol("(")
        nargs = self._next_expression_list()
        if is_method:
            self._bytecode.write_method_call(fname, nargs + 1)
        else:
            self._bytecode.write_method_call(fname, nargs)
        self._next_symbol(")")

    def _next_return_statement(self):
        with self._rule("returnStatement"):
            self._next_keyword(RETURN)
            if not self._check_next(Symbol, ";"):
                self._next_expression()
            else:
                self._bytecode.write_push("constant", 0)
            self._next_symbol(";")
            self._bytecode.write_return()

    def _next_expression(self):
        with self._rule("expression"):
            self._expand_term()

            if self._check_next(Symbol, *tuple(OPS)):
                op = self._next_symbol(*tuple(OPS))
                self._expand_term()
                self._bytecode.write_binary_operation(op)

    def _next_expression_list(self):
        with self._rule("expressionList"):

            exp_count = 0
            while not self._check_next(Symbol, ")"):
                if exp_count:
                    self._next_symbol(",")
                exp_count += 1
                self._next_expression()
            return exp_count

    def _expand_term(self):
        with self._rule("term"):
            token = self._next_token()

            # integer or string constant
            if isinstance(token, Integer):
                self._write_token(token)
                self._bytecode.write_push("constant", token.value)
                return

            elif isinstance(token, String):
                self._write_token(token)
                self._bytecode.write_string(token.value)
                return

            # keyword constants
            elif isinstance(token, Keyword):
                value = self._next_keyword(TRUE, FALSE, NULL, THIS)
                self._bytecode.write_constant(value)
                return

            # array subscription
            elif self._look_ahead_array_subscr():
                identifier = self._next_identifier()
                symbol = self._symtable[identifier]
                self._next_symbol("[")
                self._next_expression()
                self._next_symbol("]")
                self._bytecode.write_array_subscription(symbol)

            # subroutine call
            elif self._look_ahead_subroutine_call():
                self._next_subroutine_call()

            # variable
            elif isinstance(token, Identifier):
                identifier = self._next_identifier()
                symbol = self._symtable[identifier]
                self._bytecode.write_push_symbol(symbol)

            # (expression)
            elif self._check_next(Symbol, "("):
                self._next_symbol("(")
                self._next_expression()
                self._next_symbol(")")

            # unary operations
            elif self._check_next(Symbol, *tuple(UNARY_OPS)):
                op = self._next_symbol(*tuple(UNARY_OPS))
                self._expand_term()
                self._bytecode.write_unary_operation(op)

            else:
                raise UnknownTokenError("token totally unexpected")

    def _look_ahead_array_subscr(self):
        if self._pos + 1 < len(self._tokens):
            token = self._tokens[self._pos + 1]
            return (
                self._check_next(Identifier) and
                check_token(token, Symbol, "["))

    def _look_ahead_subroutine_call(self):
        if self._pos + 1 < len(self._tokens):
            token = self._tokens[self._pos + 1 ]
            return (
                self._check_next(Identifier) and (
                    check_token(token, Symbol, "(") or
                    check_token(token, Symbol, ".")))

# <-- PARSER


def parse_args():
    """Parse and return incoming arguments.

    :return: parsed arguments
    :rtype: argparse.Namespace
    """
    parser = argparse.ArgumentParser(description="JACK VM translator")
    parser.add_argument("-d", "--debug", action="store_true", help="Debug mode")
    parser.add_argument("-o", "--output", help="output file")
    parser.add_argument(
        "-m", "--outmode", default="vm", choices=("xml", "vm"),
        help="Output mode")
    parser.add_argument("filename", help="input file")

    return parser.parse_args()


def main():
    """Main entry point."""

    def chext(filepath, ext):
        path, name = os.path.split(filepath)
        return os.path.join(path, os.path.splitext(name)[0] + ext)

    args = parse_args()
    debug = args.debug

    logging.getLogger().setLevel(logging.DEBUG if debug else logging.INFO)
    logging.debug("Incoming args: %s", args)

    if os.path.isdir(args.filename):
        logging.debug("Compiling directory: %s", args.filename)
        inputs = glob.glob(os.path.join(args.filename, "*jack"))
    else:
        inputs = [args.filename]

    for filename in inputs:
        logging.debug("Compiling file: %s", filename)
        with open(filename) as source:
            tokens = tokenize(source.read())
            bytecode = compile_bytecode(tokens, args.outmode)

        with open(chext(filename, ".{0}".format(args.outmode)), "w") as target:
            target.write(bytecode)


if __name__ == "__main__":
    main()
