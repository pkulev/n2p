#!/usr/bin/env python

"""JACK VM translator to HACK assembler.

Translates JACK Virtual Machine language to HACK assembly language.
"""

import argparse
import collections
import functools
import glob
import itertools
import logging
import os
import re


DEBUG = False
"""Debug mode."""

LABEL_COUNTER = itertools.count(0)
"""Counter for generating unique label ID's."""

FILENAME = None
"""Current file name for translation."""

FUNCTION = ""
"""Current function name."""

ASM = []
"""Resulting ASM code."""

def asm(*lines):
    ASM.extend(lines)


ARCH_BITS = 16
"""Bits in memory register (word's length)."""

RAM_MAX_ADDRESS = 2 ** ARCH_BITS - 1
"""Max address that CPU implementation supports."""


class TranslationError(Exception):
    """Base class for VM->ASM translation exceptions."""

    def __init__(self, msg):
        super(TranslationError, self).__init__(msg)


class UnknownInstructionError(TranslationError):
    """Got unknown instruction."""

    def __init__(self, lineno, instruction, args):
        super(UnknownInstructionError, self).__init__(
            "Unknown instruction:%s: %s %s".format(
                lineno, instruction, args))


class UnsupportedInstructionError(TranslationError):
    """Got unsupported instruction on command processing."""

    def __init__(self, instruction):
        super(UnsupportedInstructionError, self).__init__(
            "Unsupported instruction: %s", repr(instruction))


COMMENT_SYMBOL = "//"
FREE_ADDRESS_SYMBOL = "__SYSTEM::ALLOC::FREE_ADDRESS"

# Arithmetic commands
PUSH = "push"
POP  = "pop"
ADD  = "add"
SUB  = "sub"
NEG  = "neg"
EQ   = "eq"
GT   = "gt"
LT   = "lt"
AND  = "and"
OR   = "or"
NOT  = "not"

STATIC   = "static"
LOCAL    = "local"
ARGUMENT = "argument"
THIS     = "this"
THAT     = "that"
CONSTANT = "constant"
POINTER  = "pointer"
TEMP     = "temp"

COMMENT        = "commentary"
INLINE_COMMENT = "inline commentary"
WHITESPACE     = "whitespace"

# Program flow commands
LABEL   = "label"
GOTO    = "goto"
IF_GOTO = "if-goto"

# Function instructions
CALL     = "call"
RETURN   = "return"
FUNCTION = "function"

SYS_INIT = "Sys.init"
"""Program bootstrapper."""


ARITHMETIC_INSTRUCTIONS = (
    # arithmetic
    ADD,
    SUB,
    NEG,
    # logical
    EQ,
    GT,
    LT,
    AND,
    OR,
    NOT
)

MEMORY_INSTRUCTIONS = (
    PUSH,
    POP
)

PROGRAM_FLOW_INSTRUCTIONS = (
    LABEL,
    GOTO,
    IF_GOTO,
)

FUNCTION_INSTRUCTIONS = (
    CALL,
    FUNCTION,
)


MEMSEG_TO_BASE = {
    ARGUMENT: "ARG",
    LOCAL: "LCL",
    THIS: "THIS",
    THAT: "THAT"
}
"""Memory segment <-> base variable mapping (segment base index)."""


MEMREG_TO_BASE = {
    POINTER: "THIS",
    TEMP: "R5"
}
"""Memory register instruction <-> variable address (segment base index)."""


RE_COMMENT          = re.compile(r"^\s*{0}.*".format(COMMENT_SYMBOL))
RE_INLINE_COMMENT   = re.compile(r".*{0}.*".format(COMMENT_SYMBOL))
RE_PUSH_INSTR       = re.compile(r"^push.*")
RE_POP_INSTR        = re.compile(r"^pop.*")
RE_WHITESPACE       = re.compile(r"^\s*$")
RE_LABEL            = re.compile(r"^label.*")
RE_GOTO             = re.compile(r"^goto.*")
RE_IF_GOTO          = re.compile("^if-goto.*")
RE_ARITHMETIC_INSTR = re.compile(
    r"^{0}.*".format("|".join(ARITHMETIC_INSTRUCTIONS)))


ArithmeticInstruction = collections.namedtuple(
    "ArithmeticInstruction", ["command"])

MemoryInstruction = collections.namedtuple(
    "MemoryInstruction", ["command", "segment", "index"])

ProgramFlowInstruction = collections.namedtuple(
    "ProgramFlowInstruction", ["command", "label"])

FunctionInstruction = collections.namedtuple(
    "FunctionInstruction", ["command", "fname", "nargs"])

ReturnInstruction = collections.namedtuple(
    "FunctionInstruction", ["command"])


TOKENS = {
    PUSH:             RE_PUSH_INSTR,
    POP:              RE_POP_INSTR,
    COMMENT:          RE_COMMENT,
    INLINE_COMMENT:   RE_INLINE_COMMENT,
    WHITESPACE:       RE_WHITESPACE,
    LABEL:            RE_LABEL,
    GOTO:             RE_GOTO,
    IF_GOTO:          RE_IF_GOTO,
}


def is_type(token, source):
    """Check token class.

    :param str token: token class
    :param str source: line of code

    :return: re or None
    """
    return TOKENS[token].match(source)


def is_type(token, source):
    """Check token class.

    :param str token: token class
    :param str source: line of code

    :return: re or None
    """
    return TOKENS[token].match(source)


def remove_inline_comment(instruction):
    """Remove comment on single line with instruction.

    :param str instruction: unparsed instruction

    :return str: instruction without inline comment
    """

    if is_type(INLINE_COMMENT, instruction):
        end = instruction.index(COMMENT_SYMBOL)
        return instruction[0:end].strip()
    else:
        return instruction.strip()


def label_id(name):
    """Generate unique string representing label for asm generated code.

    :param str name: label name

    :return str: label ID
    """

    return "{0}.{1}".format(name, LABEL_COUNTER.next())


def function_label_id(name):
    """Label string in current function.

    :param string name: label name

    :return str: label ID within function
    """

    return "{0}.{1}".format(FUNCTION, name)


def static_symbol(index):
    """Static symbol name (per file).

    :param int index: memory index

    :return str: static symbol
    """

    return "{0}.{1}".format(FILENAME, index)


def translate_binary_arithmetic_instruction(instruction):
    """Translate binary instruction to HACK ASM.

    :param ArithmeticInstruction instruction:
    """

    BINARY_TO_ASM = {
        ADD: "M=D+M",
        SUB: "M=M-D",
        AND: "M=D&M",
        OR:  "M=D|M",
    }

    asm(
        "@SP",
        "AM=M-1",
        "D=M",
        "A=A-1",
        BINARY_TO_ASM[instruction.command],
    )


def translate_unary_arithmetic_instruction(instruction):
    """Translate unary instruction to HACK ASM.

    :param ArithmeticInstruction instruction:
    """

    UNARY_TO_ASM = {
        NEG: "M=-M",
        NOT: "M=!M",
    }

    asm(
        "@SP",
        "A=M-1",
        UNARY_TO_ASM[instruction.command],
    )


def translate_compare_instruction(instruction):
    """Translate comparison instruction to HACK ASM.

    :param ArithmeticInstruction instruction:
    """

    CMP_TO_ASM_JMP = {
        EQ: "D;JEQ",  # x == y
        GT: "D;JGT",  # x > y
        LT: "D;JLT",  # x < y
    }

    condition_true_label = label_id("condition.true")

    asm(
        "@SP",
        "AM=M-1",
        "D=M",  # D = y
        "A=A-1",
        "D=M-D",  # D = x - y
        # set stack's head to be True (0xffff)
        "M=-1",
        "@{0}".format(condition_true_label),
        CMP_TO_ASM_JMP[instruction.command],
        # if false - inc stack head value so it became False (0)
        "@SP",
        "A=M-1",
        "M=M+1",
        "({0})".format(condition_true_label),
    )


def translate_pop_instruction(instruction):
    """Process VM pop command.

    Write the address of the address to store the value of D register ay
    top of the stack and increment stack pointer.

    :param MemoryInstruction instruction:
    """

    if instruction.segment in MEMSEG_TO_BASE:
        base = MEMSEG_TO_BASE[instruction.segment]
        asm(
            "@{0}".format(base),
            "D=M",
            "@{0}".format(instruction.index),
            "D=D+A",
        )

    elif instruction.segment in MEMREG_TO_BASE:
        base = MEMREG_TO_BASE[instruction.segment]
        asm(
            "@{0}".format(base),
            "D=A",
            "@{0}".format(instruction.index),
            "D=D+A",
        )

    elif instruction.segment == STATIC:
        static_variable = static_symbol(instruction.index)
        asm(
            "@{0}".format(static_variable),
            "D=A",
        )

    else:
        raise UnsupportedInstructionError(instruction)

    asm(
        "@R13",
        "M=D",  # R13 <-- cell's address to read from
        "@SP",
        "AM=M-1",
        "D=M",
        "@R13",
        "A=M",
        "M=D",
    )


def translate_push_instruction(instruction, dereference_constant=False):
    """Process push VM command.

    Read the value from selected segment and store it in D register,
    then store value of D register at the top of the stack and increment
    stack pointer.

    :param MemoryInstruction instruction:
    :param bool dereference_constant: dereference constant
    """

    # pseudo-segment constant
    if instruction.segment == CONSTANT:
        asm(
            "@{0}".format(instruction.index),
            "D=A" if not dereference_constant else "D=M",
        )

    # index based memory segments
    elif instruction.segment in MEMSEG_TO_BASE:
        base = MEMSEG_TO_BASE[instruction.segment]
        asm(
            "@{0}".format(base),
            "D=M",
            "@{0}".format(instruction.index),
            "A=D+A",
            "D=M",
        )

    elif instruction.segment in MEMREG_TO_BASE:
        base = MEMREG_TO_BASE[instruction.segment]
        asm(
            "@{0}".format(base),
            "D=A",
            "@{0}".format(instruction.index),
            "A=D+A",
            "D=M",
        )

    elif instruction.segment == STATIC:
        static_variable = static_symbol(instruction.index)
        asm(
            "@" + static_variable,
            "D=M",
        )

    else:
        raise UnsupportedInstruction(instruction)

    # store value of D register in @SP and increment SP
    asm(
        "@SP",
        "A=M",
        "M=D",
        "@SP",
        "M=M+1",
    )


def insert_bootstrap_code():
    """Set stack pointer, call Sys.init function."""

    global ASM

    all_code = ASM[:]
    ASM = []

    asm(
        "@256",
        "D=A",
        "@SP",
        "M=D",
    )

    translate_call_instruction(
        FunctionInstruction(command=CALL, fname=SYS_INIT, nargs='0'))

    ASM = ASM[:] + all_code


def translate_label_instruction(instruction):
    """Process label VM command.

    :param ProgramFlowInstruction instruction:
    """

    asm("({0})".format(function_label_id(instruction.label)))


def translate_goto_instruction(instruction):
    """Process goto VM command.

    :param ProgramFlowInstruction instruction:
    """

    asm(
        "@{0}".format(function_label_id(instruction.label)),
        "0;JMP",
    )


def translate_if_goto_instruction(instruction):
    """Process if-goto VM command.

    :param ProgramFlowInstruction instruction:
    """

    asm(
        "@SP",
        "AM=M-1",
        "D=M",
        "@{0}".format(function_label_id(instruction.label)),
        "D;JNE",
    )


def translate_function_instruction(instruction):
    """Process VM function declaration instruction.

    :param FunctionInstruction instruction:
    """

    global FUNCTION

    FUNCTION = instruction.fname

    if FUNCTION == SYS_INIT:
        insert_bootstrap_code()

        
    asm("({0})".format(FUNCTION))

    for _ in range(int(instruction.nargs)):
        translate_push_instruction(
            MemoryInstruction(command=PUSH, segment=CONSTANT, index="0"))


def translate_call_instruction(instruction):
    """Process call VM instruction.

    :param FunctionInstruction instruction:
    """

    rlabel = label_id("return-from-{0}".format(instruction.fname))

    # push return address
    translate_push_instruction(
        MemoryInstruction(
            command=PUSH,
            segment=CONSTANT,
            index=rlabel))

    # push LCL value
    translate_push_instruction(
        MemoryInstruction(
            command=PUSH,
            segment=CONSTANT,
            index="LCL"),
        dereference_constant=True)

    # push ARG value
    translate_push_instruction(
        MemoryInstruction(
            command=PUSH,
            segment=CONSTANT,
            index="ARG"),
        dereference_constant=True)

    # push THIS
    translate_push_instruction(
        MemoryInstruction(
            command=PUSH,
            segment=CONSTANT,
            index="THIS"),
        dereference_constant=True)

    # push THAT
    translate_push_instruction(
        MemoryInstruction(
            command=PUSH,
            segment=CONSTANT,
            index="THAT"),
        dereference_constant=True)

    # ARG <- SP - nargs - 5
    asm(
        "@SP",
        "D=M",
        "@{0}".format(int(instruction.nargs) + 5),
        "D=D-A",  # SP - (nargs + 5)
        "@ARG",
        "M=D",
    )

    # LCL <- SP
    asm(
        "@SP",
        "D=M",
        "@LCL",
        "M=D",
    )

    # goto function
    asm(
        "@{0}".format(instruction.fname),
        "0;JMP"
    )

    # the return address
    asm(
        "({0})".format(rlabel),
    )


def translate_return_instruction(instruction):
    """Process return VM command.

    :param ReturnInstruction instruction:
    """

    asm(
        # *(LCL - 5) -> R13
        "@LCL",
        "D=M",
        "@5",
        "A=D-A",
        "D=M",
        "@13",
        "M=D",

        # *(SP - 1) -> *ARG
        "@SP",
        "A=M-1",
        "D=M",
        "@ARG",
        "A=M",
        "M=D ",

        # ARG + 1 -> SP
        "D=A+1",
        "@SP",
        "M=D",

        # *(LCL - 1) -> THAT; LCL--
        "@LCL",
        "AM=M-1",
        "D=M",
        "@THAT",
        "M=D",

        # *(LCL - 1) -> THIS; LCL--
        "@LCL",
        "AM=M-1",
        "D=M",
        "@THIS",
        "M=D",

        # *(LCL - 1) -> ARG; LCL--
        "@LCL",
        "AM=M-1",
        "D=M",
        "@ARG",
        "M=D",

        # *(LCL - 1) -> LCL
        "@LCL",
        "A=M-1",
        "D=M",
        "@LCL",
        "M=D",

        # R13 -> A
        "@13",
        "A=M",
        "0;JMP",
    )


INSTRUCTION_TRANSLATORS = {
    # binary arithmetic commands
    ADD: translate_binary_arithmetic_instruction,
    SUB: translate_binary_arithmetic_instruction,
    AND: translate_binary_arithmetic_instruction,
    OR:  translate_binary_arithmetic_instruction,

    # unary arithmetic commands
    NOT: translate_unary_arithmetic_instruction,
    NEG: translate_unary_arithmetic_instruction,

    # comare commands
    EQ: translate_compare_instruction,
    GT: translate_compare_instruction,
    LT: translate_compare_instruction,

    # memory commands
    PUSH: translate_push_instruction,
    POP:  translate_pop_instruction,

    # program flow commands
    LABEL:   translate_label_instruction,
    GOTO:    translate_goto_instruction,
    IF_GOTO: translate_if_goto_instruction,

    # Function commands
    CALL:     translate_call_instruction,
    RETURN:   translate_return_instruction,
    FUNCTION: translate_function_instruction,
}
"""Instruction translators for every type of command."""


def strip_comments(sources):
    """Strip comments.

    :param list sources: raw vm code

    :return list: stripped sources without comments
    """

    logging.info("Stripping comments -->")
    processed = []
    for line in sources:
        line = remove_inline_comment(line)
        if line:
            processed.append(line)

    logging.info("Stripping comments <--")
    return processed


def parse_instruction(line, lineno):
    """Parse incoming instruction at lineno.

    :param str line: raw instruction
    :param int lineno: line number of current instruction

    :return collections.namedtuple: resulting command object
    """

    terms = line.split(" ")
    command = terms[0]
    if command in ARITHMETIC_INSTRUCTIONS:
        return ArithmeticInstruction(*terms)
    elif command in MEMORY_INSTRUCTIONS:
        return MemoryInstruction(*terms)
    elif command in PROGRAM_FLOW_INSTRUCTIONS:
        return ProgramFlowInstruction(*terms)
    elif command in FUNCTION_INSTRUCTIONS:
        return FunctionInstruction(*terms)
    elif command == RETURN:
        return ReturnInstruction(*terms)
    else:
        raise UnknownInstructionError(lineno, command, terms[1:])
    

def translate(sources):
    """Produce translated code.

    :param list sources: stripped sources without comments
    """

    lineno = 0

    logging.info("Tier II: translating vm code to asm -->")
    for line in sources:
        logging.debug("Processing line %s:", repr(line))
        instruction = parse_instruction(line, lineno)
        translator = INSTRUCTION_TRANSLATORS[instruction.command]
        if DEBUG:
            asm("// {0}".format(instruction))

        translator(instruction)
        lineno += 1

    logging.info("Tier II: translating vm code to asm <--")


def vm_translator(sources):
    """Produce translated code."""

    return translate(strip_comments(sources))


def parse_args():
    """Parse and return incoming arguments.

    :return: parsed arguments
    :rtype: argparse.Namespace
    """
    parser = argparse.ArgumentParser(description="JACK VM translator")
    parser.add_argument("-d", "--debug", action="store_true", help="Debug mode")
    parser.add_argument("-o", "--output", help="output file")
    parser.add_argument("filename", help="input file")

    return parser.parse_args()


def prepare_filenames(infile, outfile=None, out_ext="asm"):
    """Choose out file name if not provided.

    :param str infile: input file name
    :param str outfile: output file name
    :param str out_ext: output file extension

    :return: processed file names
    :rtype: tuple([str], str)
    """
    name, ext = os.path.splitext(infile)
    outfile = ".".join([name, out_ext]) if outfile is None else outfile
    return [infile], outfile


def main():
    """Main entry point."""

    global DEBUG
    global FILENAME

    args = parse_args()
    DEBUG = args.debug
    
    logging.getLogger().setLevel(logging.DEBUG if DEBUG else logging.INFO)
    logging.debug("Incoming args: %s", args)

    if os.path.isdir(args.filename):
        logging.debug("Translating directory: %s", args.filename)
        infile = glob.glob(os.path.join(args.filename, "*.vm"))
        outfile = os.path.join(
            args.filename, os.path.basename(args.filename) + ".asm")
    else:
        infile, outfile = prepare_filenames(args.filename, args.output)

    for filename in infile:
        logging.debug("Translating %s", filename)
        FILENAME = os.path.splitext(os.path.basename(filename))[0]

        with open(filename) as source:
            vm_translator(source.readlines())

    assembly_code = os.linesep.join(ASM)
    logging.debug("Contents of: %s", outfile)
    logging.debug(assembly_code)

    with open(outfile, "w") as target:
        target.write(assembly_code)


if __name__ == "__main__":
    main()
