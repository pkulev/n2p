#!/usr/bin/env python

"""HACK assembler.

Translates HACK Assembly language to HACK machine language.
"""

import argparse
import functools
import logging
import re
import os

from pprint import pformat
logging.getLogger().setLevel(logging.DEBUG)


class TranslationError(Exception):
    """Base class for assembler exceptions."""

    def __init__(self, msg):
        super(TranslationError, self).__init__(msg)


class ExceededArchRAMLimit(TranslationError):
    """Exceeded RAM limitation."""

    def __init__(self, requested_address):
        super(ExceededArchRAMLimit, self).__init__(
            "Arch: %s bit, max RAM address: %s, requested address: %s".format(
                ARCH_BITS, RAM_MAX_ADDRESS, requested_address))


class UndeclaredLabel(TranslationError):
    """Parser met undeclared label."""

    def __init__(self, label):
        super(TranslationError, self).__init__(
            "Undeclared label: {0}".format(label))


class LabelRedeclarationError(TranslationError):
    """Parser met already declared label redeclaration."""

    def __init__(self, label, address):
        super(TranslationError, self).__init__(
            "Label {0} already was declared with value {1}".format(
                label, address))


ARCH_BITS = 16
"""Bits in memory register (word's length)."""

RAM_MAX_ADDRESS = 2 ** ARCH_BITS - 1
"""Max address that CPU implementation supports."""

COMMENT_SYMBOL = "//"
FREE_ADDRESS_SYMBOL = "__SYSTEM::ALLOC::FREE_ADDRESS"

RE_A_TYPE_INSTR   = re.compile(r"^@.*")
RE_C_TYPE_INSTR   = re.compile(r"^.*=.*|.*;.*")
RE_COMMENT        = re.compile(r"^\s*{0}.*".format(COMMENT_SYMBOL))
RE_INLINE_COMMENT = re.compile(r".*{0}.*".format(COMMENT_SYMBOL))
RE_WHITESPACE     = re.compile(r"^\s*$")
RE_LABEL_DECL     = re.compile(r"^\(.*\)")

A_TYPE_INSTR   = "A TYPE INSTRUCTION"
C_TYPE_INSTR   = "C TYPE INSTRUCTION"
COMMENT        = "COMMENTARY"
INLINE_COMMENT = "INLINE COMMENTARY"
WHITESPACE     = "WHITESPACE"
LABEL_DECL     = "LABEL DECLARATION"

TOKENS = {
    A_TYPE_INSTR:   RE_A_TYPE_INSTR,
    C_TYPE_INSTR:   RE_C_TYPE_INSTR,
    COMMENT:        RE_COMMENT,
    INLINE_COMMENT: RE_INLINE_COMMENT,
    WHITESPACE:     RE_WHITESPACE,
    LABEL_DECL:     RE_LABEL_DECL,
}


C_JUMP_MAP = "__DECL::INSTR::TYPE_C::JUMP_MAP"
C_DEST_MAP = "__DECL::INSTR::TYPE_C::DEST_MAP"
C_COMP_MAP = "__DECL::INSTR::TYPE_C::COMP_MAP"

C_INSTR_SPECS = {
    C_JUMP_MAP: {
        "":    "000",
        "JGT": "001",
        "JEQ": "010",
        "JGE": "011",
        "JLT": "100",
        "JNE": "101",
        "JLE": "110",
        "JMP": "111",
    },
    C_DEST_MAP: {
        "":    "000",
        "M":   "001",
        "D":   "010",
        "MD":  "011",
        "A":   "100",
        "AM":  "101",
        "AD":  "110",
        "AMD": "111",
    },
    C_COMP_MAP: {
        "0":   "0101010",
        "1":   "0111111",
        "-1":  "0111010",
        "D":   "0001100",
        "A":   "0110000",
        "!D":  "0001101",
        "!A":  "0110001",
        "-D":  "0001111",
        "-A":  "0110011",
        "D+1": "0011111",
        "A+1": "0110111",
        "D-1": "0001110",
        "A-1": "0110010",
        "D+A": "0000010",
        "D-A": "0010011",
        "A-D": "0000111",
        "D&A": "0000000",
        "D|A": "0010101",
        "M":   "1110000",
        "!M":  "1110001",
        "-M":  "1110011",
        "M+1": "1110111",
        "M-1": "1110010",
        "D+M": "1000010",
        "D-M": "1010011",
        "M-D": "1000111",
        "D&M": "1000000",
        "D|M": "1010101",
    },
}
"""Type C instruction specification mappings."""



def to_word(symbol):
    """Convert decimal integer to 16 bit binary string representation.

    :param str symbol: assembly language symbol

    :return str: binary representation string
    """

    return bin(int(symbol))[2:].zfill(ARCH_BITS)


def create_builtins_symbol_table():
    """Builtin symbol table."""

    BUILTINS_SYMBOL_TABLE = {
    # HACK Specification
        "SCREEN": to_word(16384),
        "KBD":    to_word(24576),
        "SP":     to_word(0),
        "LCL":    to_word(1),
        "ARG":    to_word(2),
        "THIS":   to_word(3),
        "THAT":   to_word(4),

    # Translator-specific
        FREE_ADDRESS_SYMBOL: 16,
    }

    # First 16 RAM register aliases: R0..R15
    for i in range(16):
        BUILTINS_SYMBOL_TABLE["R{0}".format(i)] = to_word(i)
    return BUILTINS_SYMBOL_TABLE


_SYMBOL_TABLE = create_builtins_symbol_table()
"""Symbol table that shared between all processing functions."""


def symbol_table(func):
    """Wrapper for functions working with symbol_table."""

    @functools.wraps(func)
    def inner(*args, **kwargs):
        return func(*args, symbol_table=_SYMBOL_TABLE, **kwargs)
    return inner


def is_type(token, source):
    """Check token class.

    :param str token: token class
    :param str source: line of code

    :return: re or None
    """
    return TOKENS[token].match(source)


@symbol_table
def ralloc(symbol_table):
    """Allocate new RAM address.

    :symbol_table: symbol table

    :return int: allocated RAM address
    """

    free_address = symbol_table[FREE_ADDRESS_SYMBOL]
    if free_address > RAM_MAX_ADDRESS:
        raise ExceededArchRAMLimit(free_address)
    symbol_table[FREE_ADDRESS_SYMBOL] += 1
    return free_address


def remove_inline_comment(instruction):
    """Remove comment on single line with instruction.

    :param str instruction: unparsed instruction

    :return str: instruction without inline comment
    """

    if is_type(INLINE_COMMENT, instruction):
        end = instruction.index(COMMENT_SYMBOL)
        return instruction[0:end].strip()
    else:
        return instruction.strip()


@symbol_table
def parse_a_instuction(instruction, symbol_table):
    """Parse A-type instruction.

    Mnemonics: @<address>|<variable>|<label>
    Machine: 0<15-bit address>
    Hardware:
    * Set register 'A' (Address) to value
    * Set register 'M' (Memory) to RAM[A] (Indirect, side-effect)

    :param str instruction: incoming A-type instruction
    :param dict symbol_table: symbol table

    :return str: 15-bit address (0 + address)
    """

    logging.debug("Parsing 'A' instruction: %s", instruction)
    symbol = remove_inline_comment(instruction[1:])
    logging.debug("Got symbol: %s", repr(symbol))
    # it's already address
    if symbol.isdigit():
        logging.debug("Value is digit, returning '%s'", to_word(symbol))
        return to_word(symbol)
    else:
        # built-in/existing variable or declared label
        if symbol in symbol_table:
            logging.debug("Value is in symbol table: %s", symbol_table[symbol])
            return symbol_table[symbol]
        else:
        # Just in case of unprocessed label declaration
            if symbol.isupper():
                logging.error(pformat(symbol_table))
                raise UndeclaredLabel(symbol)

            # new variable
            address = ralloc()
            symbol_table[symbol] = to_word(address)
            logging.debug(
                "ALLOC: %s bytes allocated, address = %s", ARCH_BITS, address)
            return to_word(address)


def parse_c_instruction(instruction):
    """Parse C-type instruction.

    Mnemonics: [<dest>=<comp>]|0;<jmp>
    Machine: 111<comp-bits><dest-bits><jmp-bits>
    Hardware:
    * do the computation for <comp>
    * store result in <dest> (and-or A M D)
    * compare with <jmp> and jump to ROM[A] code address

    :param str instruction: incoming C-type instruction

    :return str: instruction machine code
    """

    instruction_template = "{opcode}{reserved}{comp}{dest}{jmp}"

    def parse_jmp(instruction):
        """JMP subparser."""

        logging.debug("Parsing JMP: %s", instruction)
        if ";" in instruction:
            left, jmp = instruction.split(";")
            logging.debug("Got ';', left, jmp = '%s', '%s'", left, jmp)
        else:
            left, jmp = instruction, ""
            logging.debug("No ';' found, left, jmp = '%s', '%s'", left, jmp)
        return left, C_INSTR_SPECS[C_JUMP_MAP][jmp.strip()]

    def parse_dest_comp(instruction, jmp):
        """DEST-COMP subparser."""

        logging.debug("Parsing DEST&COMP: %s", instruction)
        if "=" in instruction:
            dest, comp = instruction.split("=")
            logging.debug("Got '=', dest, comp = '%s', '%s'", dest, comp)
        else:
            logging.debug("No '=' found.")
            if jmp == C_INSTR_SPECS[C_JUMP_MAP]["JMP"]:
                # Unconditional jump: 0; JMP
                dest, comp = ("", "0")
                logging.debug(
                    "Unconditional jump. dest, comp = '%s', '%s'", dest, comp)
            else:
                dest, comp = ("", instruction)
                logging.debug(
                    "Conditional jump. dest, comp = '%s', '%s'", dest, comp)

        return (
            C_INSTR_SPECS[C_DEST_MAP][dest.strip()],
            C_INSTR_SPECS[C_COMP_MAP][comp.strip().replace(" ", "")]
        )

    logging.debug("Parsing C-type instruction: %s", repr(instruction))
    instruction = remove_inline_comment(instruction)
    logging.debug("Source: %s", instruction)

    left, jmp = parse_jmp(instruction)
    dest, comp = parse_dest_comp(left, jmp)
    logging.debug("Parsed comp: %s, dest: %s, jmp: %s", comp, dest, jmp)
    logging.debug("Resulting: 111%s%s%s", comp, dest, jmp)

    values = {
        "opcode": 1,
        "reserved": 11,
        "comp": comp,
        "dest": dest,
        "jmp": jmp
    }

    return instruction_template.format(**values)


def apply_functions(functions, data):
    """Apply functions.

    :param collections.Iterable functions: collection of functions to apply
    :param collections.Iterable data: collection of data apply to

    :return list: results"""

    res = []
    for item in data:
        for func in functions:
            item = func(item)
        res.append(item)

    return res


@symbol_table
def process_label_declarations(sources, symbol_table):
    """Tier I of translation: processing label declaraions.

    On every label declaration register it with symbol table.
    On Tier II of translation values of labels will be inserted to right place.

    :param collections.Iterable sources: raw source code
    """

    logging.info("Tier I: processing label declarations -->")
    lineno = 0
    for line in sources:
        if is_type(COMMENT, line) or is_type(WHITESPACE, line):
            continue

        if is_type(LABEL_DECL, line):
            logging.debug("Got declaration: %s", repr(line))
            # remove comment and then braces: (LABEL) //1 -> LABEL
            label = remove_inline_comment(line).strip()[1:-1]
            logging.debug("Label name: %s", label)

            # As labels and variables have different letter case we can use
            # symbol table to store processed labels as ROM addresses
            if label in symbol_table:
                logging.error(pformat(symbol_table))
                raise LabelRedeclarationError(label, symbol_table["label"])
            else:
                symbol_table[label] = to_word(lineno)
                logging.debug(
                    "Label wrote to symbol table: %s -> %s",
                    label, symbol_table[label])

            # Don't update lineno
            continue

        lineno += 1
    logging.info("Tier I: processing label declarations <--")


def translate(sources):
    lineno = 0
    translated = []

    logging.info("Tier II: translating asm to machine code -->")
    for line in sources:
        line = line.strip()
        logging.debug("Processing line %s:", repr(line))
        if is_type(COMMENT, line) or is_type(WHITESPACE, line):
            # ignore comments and empty lines
            continue
        elif is_type(A_TYPE_INSTR, line):
            result = parse_a_instuction(line)
        elif is_type(C_TYPE_INSTR, line):
            result = parse_c_instruction(line)
        elif is_type(LABEL_DECL, line):
            # already processed, just skip line
            continue
        else:
            result = line

        translated.append(result)
        lineno += 1

    logging.info("Tier II: translating asm to machine code <--")
    return translated


def assembler(sources):
    """Produce translated code."""

    process_label_declarations(sources)
    return translate(sources)


def parse_args():
    """Parse and return incoming arguments.

    :return: parsed arguments
    :rtype: argparse.Namespace
    """
    parser = argparse.ArgumentParser(description="HACK assembler")
    parser.add_argument("-d", "--debug", action="store_true", help="Debug mode")
    parser.add_argument("-o", "--output", help="output file")
    parser.add_argument("filename", help="input file")

    return parser.parse_args()


def prepare_filenames(infile, outfile=None, out_ext="hack"):
    """Choose out file name if not provided.

    :param str infile: input file name
    :param str outfile: output file name
    :param str out_ext: output file extension

    :return: processed file names
    :rtype: tuple(str, str)
    """
    name, ext = os.path.splitext(infile)
    outfile = ".".join([name, out_ext]) if outfile is None else outfile
    return infile, outfile


def main():
    """Main entry point."""

    args = parse_args()
    logging.getLogger().setLevel(logging.DEBUG if args.debug else logging.INFO)
    logging.debug("Incoming args: %s", args)
    infile, outfile = prepare_filenames(args.filename, args.output)
    logging.debug("Read from: '%s', write to: '%s'", infile, outfile)
    with open(infile) as sources:
        machine_code = assembler(sources.readlines())

    logging.debug("Resulting machine code -->")
    if args.debug:
        for line in machine_code:
            logging.debug(line)
    logging.debug("Resulting machine code <--")

    with open(outfile, "w") as target:
        for line in machine_code:
            target.write(line + "\n")


if __name__ == "__main__":
    main()
